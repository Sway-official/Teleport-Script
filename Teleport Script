local Library = loadstring(Game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wizard"))()
local Window = Library:NewWindow("OP Teleport Script")

local Tab = Window:NewSection("Main Functions")

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local savedPosition = nil
local noclipEnabled = false
local returnEnabled = false
local godMode = false
local returnDelay = 0.5
local connections = {}

-- Toggle: Return to original position
Tab:CreateToggle("Return After Teleport", function(state)
	returnEnabled = state
end)

-- Button: Save current position
Tab:CreateButton("Save Position", function()
	character = player.Character or player.CharacterAdded:Wait()
	local hrp = character:FindFirstChild("HumanoidRootPart")
	if hrp then
		savedPosition = hrp.Position
	end
end)

-- Button: Teleport to saved position
Tab:CreateButton("Teleport to Saved Position", function()
	character = player.Character or player.CharacterAdded:Wait()
	local hrp = character:FindFirstChild("HumanoidRootPart")
	if savedPosition and hrp then
		local currentPos = hrp.Position
		hrp.CFrame = CFrame.new(savedPosition)
		if returnEnabled then
			task.delay(returnDelay, function()
				local root = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
				if root then
					root.CFrame = CFrame.new(currentPos)
				end
			end)
		end
	end
end)

-- Toggle: No-Clip
Tab:CreateToggle("Toggle No-Clip", function(state)
	noclipEnabled = state
	if noclipEnabled then
		table.insert(connections, RunService.Stepped:Connect(function()
			if not noclipEnabled then return end
			local char = player.Character or player.CharacterAdded:Wait()
			for _, part in pairs(char:GetDescendants()) do
				if part:IsA("BasePart") then
					part.CanCollide = false
				end
			end
		end))
	else
		for _, conn in ipairs(connections) do pcall(function() conn:Disconnect() end) end
		connections = {}
		local char = player.Character or player.CharacterAdded:Wait()
		for _, part in pairs(char:GetDescendants()) do
			if part:IsA("BasePart") then
				part.CanCollide = true
			end
		end
	end
end)

-- Toggle: God Mode
Tab:CreateToggle("Toggle God Mode", function(state)
	godMode = state

	if godMode then
		local function enableGodMode()
			local char = player.Character or player.CharacterAdded:Wait()
			local hum = char:FindFirstChildOfClass("Humanoid")

			if hum then
				hum.Name = "GodHumanoid"
				hum.Health = hum.MaxHealth

				table.insert(connections, RunService.Stepped:Connect(function()
					if godMode and hum and hum.Parent then
						if hum.Health < hum.MaxHealth then
							hum.Health = hum.MaxHealth
						end
					end
				end))

				table.insert(connections, RunService.Heartbeat:Connect(function()
					if not godMode then return end
					for _, obj in ipairs(char:GetDescendants()) do
						if obj:IsA("BallSocketConstraint") or obj:IsA("HingeConstraint") then
							obj:Destroy()
						elseif obj:IsA("Motor6D") and not obj.Enabled then
							obj.Enabled = true
						end
					end
				end))
			end
		end

		enableGodMode()
		player.CharacterAdded:Connect(function()
			if godMode then enableGodMode() end
		end)
	else
		for _, conn in ipairs(connections) do
			pcall(function() conn:Disconnect() end)
		end
		connections = {}
	end
end)

-- Optional: Another section with a Discord link
local InfoTab = Window:NewSection("Info / Credits")

